{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/bryanleongyongsheng/Desktop/goWhere Application 2/goWhere/screens/onetimescreens/GoogleMapScreen.js\";\n\nimport React, { useEffect, useRef } from \"react\";\nimport MapView, { PROVIDER_GOOGLE, Marker, Callout, Polygon, Circle } from \"react-native-maps\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useState } from \"react-native-web/dist/index\";\nimport { Top } from \"react-native-web/dist/index\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { Container, Header, Content, Input, Item, Text, Left, Right, Body, Button, Icon, Title, Footer, FooterTab } from \"native-base\";\nimport { GooglePlacesAutocomplete } from \"react-native-google-places-autocomplete\";\nimport { CommonActions } from \"@react-navigation/native\";\nimport config from \"../../config\";\nvar GOOGLE_PLACES_API_KEY = config.GOOGLE_PLACES_API_KEY;\nconsole.log(GOOGLE_PLACES_API_KEY);\n\nvar GoogleMapScreen = function GoogleMapScreen(_ref) {\n  var navigation = _ref.navigation;\n  var ref = useRef();\n  useEffect(function () {\n    var _ref$current;\n\n    (_ref$current = ref.current) == null ? void 0 : _ref$current.setAddressText(\"\");\n  }, []);\n\n  var handlePress = function handlePress() {\n    return Alert.alert(\"Far East Plaza Selected!\", \"Would you like to send reminders to your friends?\", [{\n      text: \"Yes\",\n      onPress: function onPress() {\n        return navigation.push(\"Notification\");\n      }\n    }, {\n      text: \"No\",\n      onPress: function onPress() {\n        return navigation.dispatch(CommonActions.reset({\n          index: 1,\n          routes: [{\n            name: \"Welcome\"\n          }]\n        }));\n      }\n    }]);\n  };\n\n  var state = {\n    coordinates: [{\n      name: \"VivoCity\",\n      latitude: 1.264639175987083,\n      longitude: 103.822228554653\n    }, {\n      name: \"Parkway Parade\",\n      latitude: 1.301583298620964,\n      longitude: 103.90523329698091\n    }, {\n      name: \"NEX Mall\",\n      latitude: 1.3510726229232952,\n      longitude: 103.87225849698069\n    }, {\n      name: \"J-Cube\",\n      latitude: 1.3335245176414159,\n      longitude: 103.74017773930859\n    }]\n  };\n  var total_longitude = 0;\n  var total_latitude = 0;\n\n  for (var i = 0; i < 4; i++) {\n    total_longitude += state.coordinates[i].longitude;\n    total_latitude += state.coordinates[i].latitude;\n  }\n\n  var central_coordinate = {\n    name: \"Central\",\n    latitude: total_latitude / 4,\n    longitude: total_longitude / 4\n  };\n  return React.createElement(Container, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 5\n    }\n  }, React.createElement(Header, {\n    style: {\n      backgroundColor: \"#bff6eb\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }\n  }, React.createElement(GooglePlacesAutocomplete, {\n    ref: ref,\n    placeholder: \"Search\",\n    onPress: function onPress(data) {\n      var details = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      console.log(data, details);\n    },\n    query: {\n      key: GOOGLE_PLACES_API_KEY,\n      language: \"en\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  })), React.createElement(Container, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }\n  }, React.createElement(MapView, {\n    provider: PROVIDER_GOOGLE,\n    style: styles.map,\n    region: {\n      latitude: 1.3579294997441924,\n      longitude: 103.81196521563633,\n      latitudeDelta: 1,\n      longitudeDelta: 0.5\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }\n  }, state.coordinates.map(function (marker) {\n    return React.createElement(Marker, {\n      key: marker.name,\n      coordinate: {\n        latitude: marker.latitude,\n        longitude: marker.longitude\n      },\n      title: marker.name,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 13\n      }\n    });\n  }), React.createElement(Marker, {\n    key: central_coordinate.name,\n    coordinate: {\n      latitude: central_coordinate.latitude,\n      longitude: central_coordinate.longitude\n    },\n    title: central_coordinate.name,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 11\n    }\n  }, React.createElement(Image, {\n    style: {\n      height: 60,\n      width: 60\n    },\n    source: require(\"../../assets/pacman.png\"),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 13\n    }\n  })), React.createElement(Polygon, {\n    coordinates: state.coordinates,\n    fillColor: \"rgba(100, 100, 200, 0.2)\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 11\n    }\n  }))), React.createElement(Footer, {\n    style: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }\n  }, React.createElement(FooterTab, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 9\n    }\n  }, React.createElement(Button, {\n    onPress: function onPress() {\n      return navigation.goBack();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 11\n    }\n  }, React.createElement(Icon, {\n    name: \"caret-back-sharp\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 13\n    }\n  })), React.createElement(Button, {\n    onPress: function onPress() {\n      return console.log(\"Refresh Button Pressed\");\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 11\n    }\n  }, React.createElement(Icon, {\n    name: \"ios-refresh-outline\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 13\n    }\n  })), React.createElement(Button, {\n    onPress: handlePress,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 11\n    }\n  }, React.createElement(Icon, {\n    name: \"checkmark-outline\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 13\n    }\n  })))));\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: \"#bff6eb\",\n    paddingTop: 10\n  },\n  content: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  map: {\n    width: Dimensions.get(\"window\").width,\n    height: Dimensions.get(\"window\").height\n  }\n});\nexport default GoogleMapScreen;","map":{"version":3,"sources":["/Users/bryanleongyongsheng/Desktop/goWhere Application 2/goWhere/screens/onetimescreens/GoogleMapScreen.js"],"names":["React","useEffect","useRef","MapView","PROVIDER_GOOGLE","Marker","Callout","Polygon","Circle","useState","Top","Container","Header","Content","Input","Item","Text","Left","Right","Body","Button","Icon","Title","Footer","FooterTab","GooglePlacesAutocomplete","CommonActions","config","GOOGLE_PLACES_API_KEY","console","log","GoogleMapScreen","navigation","ref","current","setAddressText","handlePress","Alert","alert","text","onPress","push","dispatch","reset","index","routes","name","state","coordinates","latitude","longitude","total_longitude","total_latitude","i","central_coordinate","backgroundColor","data","details","key","language","styles","map","latitudeDelta","longitudeDelta","marker","height","width","require","container","goBack","StyleSheet","create","paddingTop","content","flex","alignItems","justifyContent","Dimensions","get"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport MapView, {\n  PROVIDER_GOOGLE,\n  Marker,\n  Callout,\n  Polygon,\n  Circle,\n} from \"react-native-maps\";\nimport {\n  StyleSheet,\n  Dimensions,\n  View,\n  useState,\n  Top,\n  Alert,\n  Image,\n} from \"react-native\";\nimport {\n  Container,\n  Header,\n  Content,\n  Input,\n  Item,\n  Text,\n  Left,\n  Right,\n  Body,\n  Button,\n  Icon,\n  Title,\n  Footer,\n  FooterTab,\n} from \"native-base\";\nimport { GooglePlacesAutocomplete } from \"react-native-google-places-autocomplete\";\nimport { CommonActions } from \"@react-navigation/native\";\nimport config from \"../../config\";\n\nconst GOOGLE_PLACES_API_KEY = config.GOOGLE_PLACES_API_KEY;\nconsole.log(GOOGLE_PLACES_API_KEY);\n\nconst GoogleMapScreen = ({ navigation }) => {\n  const ref = useRef();\n\n  useEffect(() => {\n    ref.current?.setAddressText(\"\");\n  }, []);\n\n  const handlePress = () => {\n    return Alert.alert(\n      \"Far East Plaza Selected!\",\n      \"Would you like to send reminders to your friends?\",\n      [\n        { text: \"Yes\", onPress: () => navigation.push(\"Notification\") },\n        {\n          text: \"No\",\n          onPress: () =>\n            navigation.dispatch(\n              CommonActions.reset({\n                index: 1,\n                routes: [{ name: \"Welcome\" }],\n              })\n            ),\n        },\n      ]\n    );\n  };\n\n  const state = {\n    coordinates: [\n      // {\n      //   name: \"1\",\n      //   latitude: 1.3579294997441924,\n      //   longitude: 103.81196521563633,\n      // }, // Singapore\n      {\n        name: \"VivoCity\",\n        latitude: 1.264639175987083,\n        longitude: 103.822228554653,\n      },\n      {\n        name: \"Parkway Parade\",\n        latitude: 1.301583298620964,\n        longitude: 103.90523329698091,\n      },\n      {\n        name: \"NEX Mall\",\n        latitude: 1.3510726229232952,\n        longitude: 103.87225849698069,\n      },\n      {\n        name: \"J-Cube\",\n        latitude: 1.3335245176414159,\n        longitude: 103.74017773930859,\n      },\n    ],\n  };\n\n  // Calculating midpoint\n  var total_longitude = 0;\n  var total_latitude = 0;\n  for (var i = 0; i < 4; i++) {\n    total_longitude += state.coordinates[i].longitude;\n    total_latitude += state.coordinates[i].latitude;\n  }\n\n  const central_coordinate = {\n    name: \"Central\",\n    latitude: total_latitude / 4,\n    longitude: total_longitude / 4,\n  };\n\n  return (\n    <Container>\n      <Header style={{ backgroundColor: \"#bff6eb\" }}>\n        <GooglePlacesAutocomplete\n          ref={ref}\n          placeholder=\"Search\"\n          onPress={(data, details = null) => {\n            // 'details' is provided when fetchDetails = true\n            console.log(data, details);\n          }}\n          query={{\n            key: GOOGLE_PLACES_API_KEY,\n            language: \"en\",\n          }}\n        />\n      </Header>\n      <Container>\n        <MapView\n          provider={PROVIDER_GOOGLE}\n          style={styles.map}\n          region={{\n            latitude: 1.3579294997441924,\n            longitude: 103.81196521563633,\n            latitudeDelta: 1,\n            longitudeDelta: 0.5,\n          }}\n        >\n          {state.coordinates.map((marker) => (\n            <Marker\n              key={marker.name}\n              coordinate={{\n                latitude: marker.latitude,\n                longitude: marker.longitude,\n              }}\n              title={marker.name}\n            ></Marker>\n          ))}\n          {/* Midpoint Marker */}\n          <Marker\n            key={central_coordinate.name}\n            coordinate={{\n              latitude: central_coordinate.latitude,\n              longitude: central_coordinate.longitude,\n            }}\n            title={central_coordinate.name}\n          >\n            <Image\n              style={{ height: 60, width: 60 }}\n              source={require(\"../../assets/pacman.png\")}\n            />\n          </Marker>\n          <Polygon\n            coordinates={state.coordinates}\n            fillColor={\"rgba(100, 100, 200, 0.2)\"}\n          />\n        </MapView>\n      </Container>\n      <Footer style={styles.container}>\n        <FooterTab>\n          <Button onPress={() => navigation.goBack()}>\n            <Icon name=\"caret-back-sharp\" />\n          </Button>\n          <Button onPress={() => console.log(\"Refresh Button Pressed\")}>\n            <Icon name=\"ios-refresh-outline\" />\n          </Button>\n          <Button onPress={handlePress}>\n            <Icon name=\"checkmark-outline\" />\n          </Button>\n        </FooterTab>\n      </Footer>\n    </Container>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: \"#bff6eb\",\n    paddingTop: 10,\n  },\n  content: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  map: {\n    width: Dimensions.get(\"window\").width,\n    height: Dimensions.get(\"window\").height,\n  },\n});\n\nexport default GoogleMapScreen;\n"]},"metadata":{},"sourceType":"module"}